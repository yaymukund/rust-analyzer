initSidebarItems({"fn":[["for_each_break_expr","Calls `cb` on each break expr inside of `body` that is applicable for the given label."],["for_each_tail_expr","Calls `cb` on each expression inside `expr` that is at “tail position”. Does not walk into `break` or `return` expressions."],["item_name",""],["mod_path_to_ast","Converts the mod path struct into its ast representation."],["pick_best_token","Picks the token with the highest rank returned by the passed in function."],["try_resolve_derive_input_at","Resolves the path at the cursor token as a derive macro if it inside a token tree of a derive attribute."],["visit_file_defs","Iterates all `ModuleDef`s and `Impl` blocks of the given file."]],"mod":[["generated_lints","Generated by `sourcegen_lint_completions`, do not edit by hand."],["import_assets","Look up accessible paths for items."],["insert_use","Handle syntactic aspects of inserting a new `use`."],["merge_imports","Handle syntactic aspects of merging UseTrees."],["rust_doc","Rustdoc specific doc comment handling"]],"struct":[["FamousDefs","Helps with finding well-know things inside the standard library. This is somewhat similar to the known paths infra inside hir, but it different; We want to make sure that IDE specific paths don’t become interesting inside the compiler itself as well."],["SnippetCap",""]]});